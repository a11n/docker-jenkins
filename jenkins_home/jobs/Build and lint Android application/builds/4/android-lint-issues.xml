<?xml version='1.0' encoding='UTF-8'?>
<annotation-array>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Import&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>39</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>8</start>
        <end>8</end>
      </range>
    </lineRanges>
    <primaryLineNumber>8</primaryLineNumber>
    <fileName>/var/jenkins_home/jobs/Build and lint Android application/workspace/app/src/main/res/menu/activity_main_drawer.xml</fileName>
    <moduleName></moduleName>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-1037214503</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>        android:title=&amp;quot;Import&amp;quot;/&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Tools&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>42</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>20</start>
        <end>20</end>
      </range>
    </lineRanges>
    <primaryLineNumber>20</primaryLineNumber>
    <fileName reference="../../issue/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>1243161748</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>        android:title=&amp;quot;Tools&amp;quot;/&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Communicate&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>43</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>23</start>
        <end>23</end>
      </range>
    </lineRanges>
    <primaryLineNumber>23</primaryLineNumber>
    <fileName reference="../../issue/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-380293178</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>  &amp;lt;item android:title=&amp;quot;Communicate&amp;quot;&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Share&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>44</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>28</start>
        <end>28</end>
      </range>
    </lineRanges>
    <primaryLineNumber>28</primaryLineNumber>
    <fileName reference="../../issue/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>1489066842</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>          android:title=&amp;quot;Share&amp;quot;/&amp;gt;</string>
      <string>          ~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Send&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>45</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>32</start>
        <end>32</end>
      </range>
    </lineRanges>
    <primaryLineNumber>32</primaryLineNumber>
    <fileName reference="../../issue/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-1346760391</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>          android:title=&amp;quot;Send&amp;quot;/&amp;gt;</string>
      <string>          ~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Slideshow&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>41</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>16</start>
        <end>16</end>
      </range>
    </lineRanges>
    <primaryLineNumber>16</primaryLineNumber>
    <fileName reference="../../issue/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-868779120</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>        android:title=&amp;quot;Slideshow&amp;quot;/&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Gallery&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>40</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>12</start>
        <end>12</end>
      </range>
    </lineRanges>
    <primaryLineNumber>12</primaryLineNumber>
    <fileName reference="../../issue/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-1693363612</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>        android:title=&amp;quot;Gallery&amp;quot;/&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
</annotation-array>