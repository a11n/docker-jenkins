<?xml version='1.0' encoding='UTF-8'?>
<annotation-array>
  <issue plugin="android-lint@2.2">
    <message>The resource `@attr/actionBarSize` is marked as private in com.android.support:design</message>
    <priority>NORMAL</priority>
    <key>2</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>19</start>
        <end>19</end>
      </range>
    </lineRanges>
    <primaryLineNumber>19</primaryLineNumber>
    <fileName>/var/jenkins_home/jobs/Build and lint Android application/workspace/app/src/main/res/layout/app_bar_main.xml</fileName>
    <moduleName></moduleName>
    <category>Correctness</category>
    <type>PrivateResource</type>
    <contextHashCode>24452402</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/layout</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.  To fix this, copy the resource into your own project instead.</explanation>
    <errorLines>
      <string>        android:layout_height=&amp;quot;?attr/actionBarSize&amp;quot;</string>
      <string>                               ~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Import&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>6</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>8</start>
        <end>8</end>
      </range>
    </lineRanges>
    <primaryLineNumber>8</primaryLineNumber>
    <fileName>/var/jenkins_home/jobs/Build and lint Android application/workspace/app/src/main/res/menu/activity_main_drawer.xml</fileName>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-1037214503</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>        android:title=&amp;quot;Import&amp;quot;/&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Tools&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>9</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>20</start>
        <end>20</end>
      </range>
    </lineRanges>
    <primaryLineNumber>20</primaryLineNumber>
    <fileName reference="../../issue[2]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>1243161748</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>        android:title=&amp;quot;Tools&amp;quot;/&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Communicate&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>10</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>23</start>
        <end>23</end>
      </range>
    </lineRanges>
    <primaryLineNumber>23</primaryLineNumber>
    <fileName reference="../../issue[2]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-380293178</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>  &amp;lt;item android:title=&amp;quot;Communicate&amp;quot;&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>Should explicitly set `android:fullBackupContent` to `true` or `false` to opt-in to or out of full app data back-up and restore, or alternatively to an `@xml` resource which specifies which files to backup</message>
    <priority>NORMAL</priority>
    <key>4</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>5</start>
        <end>5</end>
      </range>
    </lineRanges>
    <primaryLineNumber>5</primaryLineNumber>
    <fileName>/var/jenkins_home/jobs/Build and lint Android application/workspace/app/src/main/AndroidManifest.xml</fileName>
    <moduleName reference="../../issue/moduleName"/>
    <category>Security</category>
    <type>AllowBackup</type>
    <contextHashCode>-1973510867</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>The allowBackup attribute determines if an application&amp;apos;s data can be backed up and restored. It is documented at http://developer.android.com/reference/android/R.attr.html#allowBackup  By default, this flag is set to `true`. When this flag is set to `true`, application data can be backed up and restored by the user using `adb backup` and `adb restore`.  This may have security consequences for an application. `adb backup` allows users who have enabled USB debugging to copy application data off of the device. Once backed up, all application data can be read by the user. `adb restore` allows creation of application data from a source specified by the user. Following a restore, applications should not assume that the data, file permissions, and directory permissions were created by the application itself.  Setting `allowBackup=&amp;quot;false&amp;quot;` opts an application out of both backup and restore.  To fix this warning, decide whether your application should support backup, and explicitly set `android:allowBackup=(true|false)&amp;quot;`</explanation>
    <errorLines>
      <string>    &amp;lt;application</string>
      <string>    ^</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>The resource `@attr/colorPrimary` is marked as private in com.android.support:design</message>
    <priority>NORMAL</priority>
    <key>3</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>20</start>
        <end>20</end>
      </range>
    </lineRanges>
    <primaryLineNumber>20</primaryLineNumber>
    <fileName reference="../../issue/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Correctness</category>
    <type>PrivateResource</type>
    <contextHashCode>-1896097119</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/layout</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.  To fix this, copy the resource into your own project instead.</explanation>
    <errorLines>
      <string>        android:background=&amp;quot;?attr/colorPrimary&amp;quot;</string>
      <string>                            ~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>Attribute `supportsRtl` is only used in API level 17 and higher (current min is 15)</message>
    <priority>NORMAL</priority>
    <key>0</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>9</start>
        <end>9</end>
      </range>
    </lineRanges>
    <primaryLineNumber>9</primaryLineNumber>
    <fileName reference="../../issue[5]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Correctness</category>
    <type>UnusedAttribute</type>
    <contextHashCode>-1886814369</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).  This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.  Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&amp;lt;tag&amp;gt;` element in layouts introduced in API 21.</explanation>
    <errorLines>
      <string>        android:supportsRtl=&amp;quot;true&amp;quot;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Slideshow&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>8</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>16</start>
        <end>16</end>
      </range>
    </lineRanges>
    <primaryLineNumber>16</primaryLineNumber>
    <fileName reference="../../issue[2]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-868779120</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>        android:title=&amp;quot;Slideshow&amp;quot;/&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Gallery&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>7</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>12</start>
        <end>12</end>
      </range>
    </lineRanges>
    <primaryLineNumber>12</primaryLineNumber>
    <fileName reference="../../issue[2]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-1693363612</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>        android:title=&amp;quot;Gallery&amp;quot;/&amp;gt;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Android Studio&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>14</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>25</start>
        <end>25</end>
      </range>
    </lineRanges>
    <primaryLineNumber>25</primaryLineNumber>
    <fileName>/var/jenkins_home/jobs/Build and lint Android application/workspace/app/src/main/res/layout/nav_header_main.xml</fileName>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>633658414</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/layout</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>      android:text=&amp;quot;Android Studio&amp;quot;</string>
      <string>      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;android.studio@android.com&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>15</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>31</start>
        <end>31</end>
      </range>
    </lineRanges>
    <primaryLineNumber>31</primaryLineNumber>
    <fileName reference="../../issue[10]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>2109233554</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/layout</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>      android:text=&amp;quot;android.studio@android.com&amp;quot;</string>
      <string>      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[Accessibility] Missing `contentDescription` attribute on image</message>
    <priority>NORMAL</priority>
    <key>5</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>14</start>
        <end>14</end>
      </range>
    </lineRanges>
    <primaryLineNumber>14</primaryLineNumber>
    <fileName reference="../../issue[10]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Accessibility</category>
    <type>ContentDescription</type>
    <contextHashCode>1735141296</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/layout</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.  Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&amp;quot;ContentDescription&amp;quot; attribute.  Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases.</explanation>
    <errorLines>
      <string>  &amp;lt;ImageView</string>
      <string>  ^</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Share&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>11</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>28</start>
        <end>28</end>
      </range>
    </lineRanges>
    <primaryLineNumber>28</primaryLineNumber>
    <fileName reference="../../issue[2]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>1489066842</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>          android:title=&amp;quot;Share&amp;quot;/&amp;gt;</string>
      <string>          ~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>Unexpected title &amp;quot;@string/app_name&amp;quot;. Should be &amp;quot;Hello world.&amp;quot;.</message>
    <priority>LOW</priority>
    <key>1</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>8</start>
        <end>8</end>
      </range>
    </lineRanges>
    <primaryLineNumber>8</primaryLineNumber>
    <fileName reference="../../issue[5]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Correctness</category>
    <type>HelloWorld</type>
    <contextHashCode>-1484744801</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>The application title should state &amp;apos;Hello world&amp;apos;</explanation>
    <errorLines>
      <string>        android:label=&amp;quot;@string/app_name&amp;quot;</string>
      <string>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Send&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>12</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>32</start>
        <end>32</end>
      </range>
    </lineRanges>
    <primaryLineNumber>32</primaryLineNumber>
    <fileName reference="../../issue[2]/fileName"/>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-1346760391</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/menu</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>          android:title=&amp;quot;Send&amp;quot;/&amp;gt;</string>
      <string>          ~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
  <issue plugin="android-lint@2.2">
    <message>[I18N] Hardcoded string &amp;quot;Hello World!&amp;quot;, should use `@string` resource</message>
    <priority>NORMAL</priority>
    <key>13</key>
    <lineRanges>
      <range plugin="analysis-core@1.61">
        <start>17</start>
        <end>17</end>
      </range>
    </lineRanges>
    <primaryLineNumber>17</primaryLineNumber>
    <fileName>/var/jenkins_home/jobs/Build and lint Android application/workspace/app/src/main/res/layout/content_main.xml</fileName>
    <moduleName reference="../../issue/moduleName"/>
    <category>Internationalization</category>
    <type>HardcodedText</type>
    <contextHashCode>-129699269</contextHashCode>
    <origin>android-lint</origin>
    <pathName>app/src/main/res/layout</pathName>
    <primaryColumnStart>0</primaryColumnStart>
    <primaryColumnEnd>0</primaryColumnEnd>
    <locations/>
    <explanation>Hardcoding text attributes directly in layout files is bad for several reasons:  * When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)  * The application cannot be translated to other languages by just adding new translations for existing string resources.  In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup.</explanation>
    <errorLines>
      <string>      android:text=&amp;quot;Hello World!&amp;quot;</string>
      <string>      ~~~~~~~~~~~~~~~~~~~~~~~~~~~</string>
    </errorLines>
  </issue>
</annotation-array>